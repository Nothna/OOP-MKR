Index: carsharing/data/users.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[{\"password\":\"123456\",\"nickname\":\"Anton\",\"id\":0,\"email\":\"antoxaantoxaa5@gmail.com\"},{\"password\":\"123456\",\"nickname\":\"Anton\",\"id\":1,\"email\":\"antoxaantoxaa6@gmail.com\"},{\"password\":\"$2a$10$KSCVWN\\/648JlyiB.Y71LTOjNVoSCFGMiEHNmbDNKvQmTxI\\/tun1Ze\",\"nickname\":\"Anton\",\"id\":2,\"email\":\"antoxaantoxaa10@gmail.com\"}]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/carsharing/data/users.json b/carsharing/data/users.json
--- a/carsharing/data/users.json	
+++ b/carsharing/data/users.json	
@@ -1,1 +1,1 @@
-[{"password":"123456","nickname":"Anton","id":0,"email":"antoxaantoxaa5@gmail.com"},{"password":"123456","nickname":"Anton","id":1,"email":"antoxaantoxaa6@gmail.com"},{"password":"$2a$10$KSCVWN\/648JlyiB.Y71LTOjNVoSCFGMiEHNmbDNKvQmTxI\/tun1Ze","nickname":"Anton","id":2,"email":"antoxaantoxaa10@gmail.com"}]
\ No newline at end of file
+[]
\ No newline at end of file
Index: carsharing/src/test/java/com/example/carsharing/UserDataTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\npackage com.example.carsharing;\r\nimport com.example.carsharing.dataWriter.UserData;\r\n\r\n\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.AfterEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class UserDataTest {\r\n\r\n    private static final String TEST_FILE_PATH = \"testData.json\";\r\n    private UserData userData;\r\n\r\n    @BeforeEach\r\n    public void setUp() throws Exception {\r\n        // Створення прикладу JSON масиву\r\n        JSONArray usersArray = new JSONArray();\r\n        JSONObject user1 = new JSONObject();\r\n        user1.put(\"id\", 1L);\r\n        user1.put(\"email\", \"test1@example.com\");\r\n        usersArray.add(user1);\r\n\r\n        // Запис даних до тестового файлу\r\n        try (FileWriter file = new FileWriter(TEST_FILE_PATH)) {\r\n            file.write(usersArray.toJSONString());\r\n            file.flush();\r\n        }\r\n\r\n        userData = new UserData(TEST_FILE_PATH);\r\n    }\r\n\r\n    @Test\r\n    public void testGetById() throws Exception {\r\n        JSONObject user = userData.get(1L);\r\n        assertNotNull(user);\r\n        assertEquals(\"test1@example.com\", user.get(\"email\"));\r\n    }\r\n\r\n    @Test\r\n    public void testGetByEmail() throws Exception {\r\n        JSONObject user = userData.get(\"test1@example.com\");\r\n        assertNotNull(user);\r\n        assertEquals(1L, user.get(\"id\"));\r\n    }\r\n\r\n    @Test\r\n    public void testGetAll() throws Exception {\r\n        JSONArray users = userData.get();\r\n        assertNotNull(users);\r\n        assertEquals(1, users.size());\r\n    }\r\n\r\n    */\r\n/*@Test\r\n    public void testCreate() throws Exception {\r\n        User newUser = new User();\r\n\r\n        dataWriter.create(newUser);\r\n        JSONObject retrievedUser = dataWriter.get(\"test2@example.com\");\r\n        assertNotNull(retrievedUser);\r\n        assertEquals(2L, retrievedUser.get(\"id\"));\r\n    }*//*\r\n\r\n\r\n    @Test\r\n    public void testUpdate() throws Exception {\r\n        JSONObject updatedUser = new JSONObject();\r\n        updatedUser.put(\"id\", 1L);\r\n        updatedUser.put(\"email\", \"updated@example.com\");\r\n\r\n        userData.update(1L, updatedUser);\r\n        JSONObject retrievedUser = userData.get(\"updated@example.com\");\r\n        assertNotNull(retrievedUser);\r\n        assertEquals(1L, retrievedUser.get(\"id\"));\r\n    }\r\n\r\n    @Test\r\n    public void testDelete() throws Exception {\r\n        userData.delete(1L);\r\n        JSONObject user = userData.get(1L);\r\n        assertNull(user);\r\n    }\r\n\r\n    // Після виконання тестів видалити тестовий файл\r\n    @AfterEach\r\n    public void tearDown() throws Exception {\r\n        File file = new File(TEST_FILE_PATH);\r\n        if (file.exists()) {\r\n            file.delete();\r\n        }\r\n    }\r\n    */\r\n/*@Test\r\n    public void testCreateWithExistingEmail() {\r\n        JSONObject newUser = new JSONObject();\r\n        newUser.put(\"id\", 3L);\r\n        newUser.put(\"email\", \"test1@example.com\");\r\n\r\n        Exception exception = assertThrows(Exception.class, () -> {\r\n            dataWriter.create(newUser);\r\n        });\r\n\r\n        String expectedMessage = \"Користувач з таким email вже існує\";\r\n        String actualMessage = exception.getMessage();\r\n        assertTrue(actualMessage.contains(expectedMessage));\r\n    }*//*\r\n\r\n}\r\n*/\r\n
===================================================================
diff --git a/carsharing/src/test/java/com/example/carsharing/UserDataTest.java b/carsharing/src/test/java/com/example/carsharing/UserDataTest.java
--- a/carsharing/src/test/java/com/example/carsharing/UserDataTest.java	
+++ b/carsharing/src/test/java/com/example/carsharing/UserDataTest.java	
@@ -1,117 +1,124 @@
-/*
 package com.example.carsharing;
+
+import static org.junit.jupiter.api.Assertions.*;
+import org.json.simple.parser.JSONParser;
 import com.example.carsharing.dataWriter.UserData;
-
-
+import com.example.carsharing.dto.CreateUserDto;
+import com.example.carsharing.userModule.User;
 import org.json.simple.JSONArray;
 import org.json.simple.JSONObject;
-import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-
-import java.io.File;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.InjectMocks;
+import static org.mockito.Mockito.*;
+import java.io.FileReader;
 import java.io.FileWriter;
+import java.io.IOException;
+import org.mockito.Mockito;
 
-import static org.junit.jupiter.api.Assertions.*;
-
+@ExtendWith(MockitoExtension.class)
 public class UserDataTest {
 
-    private static final String TEST_FILE_PATH = "testData.json";
+    @Mock
+    private FileReader mockFileReader;
+
+    @Mock
+    private FileWriter mockFileWriter;
+
+    @Mock
+    private JSONParser mockParser;
+
+    @InjectMocks
     private UserData userData;
 
+    private CreateUserDto newUserDto;
+    private JSONObject userObject;
+    private JSONArray usersArray;
+
     @BeforeEach
     public void setUp() throws Exception {
-        // Створення прикладу JSON масиву
-        JSONArray usersArray = new JSONArray();
-        JSONObject user1 = new JSONObject();
-        user1.put("id", 1L);
-        user1.put("email", "test1@example.com");
-        usersArray.add(user1);
+        // Initialize user DTO
+        newUserDto = new CreateUserDto("test@example.com", "TestUser", "password123");
+
+        // Initialize JSON objects to simulate users
+        userObject = new JSONObject();
+        userObject.put("id", 1);
+        userObject.put("email", "test@example.com");
+        userObject.put("nickname", "TestUser");
+        userObject.put("password", "hashedpassword");
 
-        // Запис даних до тестового файлу
-        try (FileWriter file = new FileWriter(TEST_FILE_PATH)) {
-            file.write(usersArray.toJSONString());
-            file.flush();
-        }
+        usersArray = new JSONArray();
+        usersArray.add(userObject);
+
+        // Setup Mocks
+        when(mockParser.parse(any(FileReader.class))).thenReturn(usersArray);
+        doNothing().when(mockFileWriter).write(anyString());
+        doNothing().when(mockFileWriter).flush();
+    }
 
-        userData = new UserData(TEST_FILE_PATH);
+
+    @AfterEach
+    public void tearDown() {
+        Mockito.reset(mockFileReader, mockFileWriter, mockParser);
     }
 
     @Test
-    public void testGetById() throws Exception {
-        JSONObject user = userData.get(1L);
-        assertNotNull(user);
-        assertEquals("test1@example.com", user.get("email"));
+    public void testGetUsers() throws Exception {
+        JSONArray result = userData.get();
+        assertNotNull(result);
+        assertEquals(1, result.size());
+        // Add more assertions as necessary
     }
 
     @Test
-    public void testGetByEmail() throws Exception {
-        JSONObject user = userData.get("test1@example.com");
-        assertNotNull(user);
-        assertEquals(1L, user.get("id"));
+    public void testGetUserById() throws Exception {
+        JSONObject result = userData.get(1);
+        assertNotNull(result);
+        assertEquals("test@example.com", result.get("email"));
+        // Add more assertions as necessary
     }
 
     @Test
-    public void testGetAll() throws Exception {
-        JSONArray users = userData.get();
-        assertNotNull(users);
-        assertEquals(1, users.size());
+    public void testGetUserByEmail() throws Exception {
+        JSONObject result = userData.get("test@example.com");
+        assertNotNull(result);
+        assertEquals(1, result.get("id"));
+        // Add more assertions as necessary
     }
-
-    */
-/*@Test
-    public void testCreate() throws Exception {
-        User newUser = new User();
-
-        dataWriter.create(newUser);
-        JSONObject retrievedUser = dataWriter.get("test2@example.com");
-        assertNotNull(retrievedUser);
-        assertEquals(2L, retrievedUser.get("id"));
-    }*//*
-
 
     @Test
-    public void testUpdate() throws Exception {
+    public void testCreateUser() throws Exception {
+        User result = userData.create(newUserDto);
+        assertNotNull(result);
+        assertEquals("test@example.com", result.getEmail());
+        // Add more assertions as necessary
+    }
+
+    @Test
+    public void testUpdateUser() throws Exception {
         JSONObject updatedUser = new JSONObject();
-        updatedUser.put("id", 1L);
-        updatedUser.put("email", "updated@example.com");
+        updatedUser.put("nickname", "UpdatedTestUser");
 
-        userData.update(1L, updatedUser);
-        JSONObject retrievedUser = userData.get("updated@example.com");
-        assertNotNull(retrievedUser);
-        assertEquals(1L, retrievedUser.get("id"));
+        userData.update(1, updatedUser);
+
+        // Verify save method was called
+        verify(mockFileWriter, times(1)).write(anyString());
+        // Additional verification and assertions as needed
     }
 
     @Test
-    public void testDelete() throws Exception {
-        userData.delete(1L);
-        JSONObject user = userData.get(1L);
-        assertNull(user);
-    }
+    public void testDeleteUser() throws Exception {
+        userData.delete(1);
 
-    // Після виконання тестів видалити тестовий файл
-    @AfterEach
-    public void tearDown() throws Exception {
-        File file = new File(TEST_FILE_PATH);
-        if (file.exists()) {
-            file.delete();
-        }
+        // Verify save method was called
+        verify(mockFileWriter, times(1)).write(anyString());
+        // Additional verification and assertions as needed
     }
-    */
-/*@Test
-    public void testCreateWithExistingEmail() {
-        JSONObject newUser = new JSONObject();
-        newUser.put("id", 3L);
-        newUser.put("email", "test1@example.com");
 
-        Exception exception = assertThrows(Exception.class, () -> {
-            dataWriter.create(newUser);
-        });
 
-        String expectedMessage = "Користувач з таким email вже існує";
-        String actualMessage = exception.getMessage();
-        assertTrue(actualMessage.contains(expectedMessage));
-    }*//*
 
 }
-*/
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/MKR-OOP.iml\" filepath=\"$PROJECT_DIR$/.idea/MKR-OOP.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
--- a/.idea/modules.xml	
+++ b/.idea/modules.xml	
@@ -2,7 +2,7 @@
 <project version="4">
   <component name="ProjectModuleManager">
     <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/MKR-OOP.iml" filepath="$PROJECT_DIR$/.idea/MKR-OOP.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/OOP-MKR.iml" filepath="$PROJECT_DIR$/.idea/OOP-MKR.iml" />
     </modules>
   </component>
 </project>
\ No newline at end of file
Index: carsharing/src/main/java/com/example/carsharing/postModule/Post.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.carsharing.postModule;\r\n\r\nimport jakarta.annotation.PostConstruct;\r\n\r\npublic class Post {\r\n    private int id;\r\n    private String authorEmail;\r\n    private String head;\r\n    private String body;\r\n    private String[] photo;\r\n\r\n    public Post(int id, String authorEmail, String head, String body, String[] photo){\r\n        this.id = id;\r\n        this.authorEmail = authorEmail;\r\n        this.head = head;\r\n        this.body = body;\r\n        this.photo = photo;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getAuthorEmail() {\r\n        return authorEmail;\r\n    }\r\n\r\n    public String getBody() {\r\n        return body;\r\n    }\r\n\r\n    public String getHead() {\r\n        return head;\r\n    }\r\n\r\n    public String[] getPhoto() {\r\n        return photo;\r\n    }\r\n}\r\n
===================================================================
diff --git a/carsharing/src/main/java/com/example/carsharing/postModule/Post.java b/carsharing/src/main/java/com/example/carsharing/postModule/Post.java
--- a/carsharing/src/main/java/com/example/carsharing/postModule/Post.java	
+++ b/carsharing/src/main/java/com/example/carsharing/postModule/Post.java	
@@ -4,14 +4,14 @@
 
 public class Post {
     private int id;
-    private String authorEmail;
+    private String userId;
     private String head;
     private String body;
-    private String[] photo;
+    private String photo;
 
-    public Post(int id, String authorEmail, String head, String body, String[] photo){
+    public Post(int id, String authorEmail, String head, String body, String photo){
         this.id = id;
-        this.authorEmail = authorEmail;
+        this.userId = authorEmail;
         this.head = head;
         this.body = body;
         this.photo = photo;
@@ -22,7 +22,7 @@
     }
 
     public String getAuthorEmail() {
-        return authorEmail;
+        return userId;
     }
 
     public String getBody() {
@@ -33,7 +33,7 @@
         return head;
     }
 
-    public String[] getPhoto() {
+    public String getPhoto() {
         return photo;
     }
 }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,6 +1,10 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="FrameworkDetectionExcludesConfiguration">
+    <file type="web" url="file://$PROJECT_DIR$/carsharing" />
+    <file type="web" url="file://$PROJECT_DIR$/server" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: carsharing/src/main/java/com/example/carsharing/auth/AuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.carsharing.auth;\r\n\r\nimport com.example.carsharing.dataWriter.UserData;\r\nimport com.example.carsharing.dto.CreateUserDto;\r\nimport com.example.carsharing.userModule.User;\r\nimport jakarta.annotation.PostConstruct;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.Date;\r\n\r\nimport com.auth0.jwt.JWT;\r\nimport com.auth0.jwt.algorithms.Algorithm;\r\n\r\n@RestController\r\n@RequestMapping(\"/auth\")\r\npublic class AuthController {\r\n    String secret = \"Somesecretkeyherenothingweryinterestingthough\";\r\n    Algorithm algorithm;\r\n\r\n    @PostConstruct\r\n    public void init() {\r\n        algorithm = Algorithm.HMAC256(secret);\r\n    }\r\n\r\n    @PostMapping(\"/register\")\r\n    public ResponseEntity register(@RequestBody() CreateUserDto user){\r\n        try{\r\n            UserData userData = new UserData();\r\n            User createdUser = userData.create(user);\r\n            String token = JWT.create()\r\n                    .withClaim(\"id\", createdUser.getId())\r\n                    .withClaim(\"email\", createdUser.getEmail())\r\n                    .withExpiresAt(new Date(System.currentTimeMillis() + 12*60*60*1000)) // 12 hour expiration\r\n                    .sign(algorithm);\r\n            return ResponseEntity.ok().body(token);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return ResponseEntity.badRequest().body(\"Error: Incorrect register credentials\");\r\n        }\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/carsharing/src/main/java/com/example/carsharing/auth/AuthController.java b/carsharing/src/main/java/com/example/carsharing/auth/AuthController.java
--- a/carsharing/src/main/java/com/example/carsharing/auth/AuthController.java	
+++ b/carsharing/src/main/java/com/example/carsharing/auth/AuthController.java	
@@ -45,4 +45,4 @@
         }
     }
 
-}
+}
\ No newline at end of file
Index: carsharing/src/main/java/com/example/carsharing/auth/AuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.carsharing.auth;\r\nimport com.auth0.jwt.JWT;\r\nimport com.auth0.jwt.algorithms.Algorithm;\r\nimport com.auth0.jwt.interfaces.DecodedJWT;\r\nimport com.auth0.jwt.interfaces.JWTVerifier;\r\nimport com.example.carsharing.dataWriter.UserData;\r\nimport jakarta.annotation.PostConstruct;\r\nimport org.json.simple.JSONObject;\r\nimport org.json.simple.parser.JSONParser;\r\nimport org.springframework.beans.factory.annotation.Value;\r\n\r\npublic class AuthService{\r\n\r\n    String secret = \"Somesecretkeyherenothingweryinterestingthough\";\r\n    Algorithm algorithm;\r\n    JSONParser parser;\r\n    UserData userData;\r\n\r\n    JWTVerifier verifier;\r\n    public AuthService() throws Exception{\r\n        this.parser = new JSONParser();\r\n        this.userData = new UserData();\r\n        this.algorithm = Algorithm.HMAC256(secret);\r\n        this.verifier = JWT.require(algorithm).build();\r\n    }\r\n\r\n\r\n\r\n\r\n    public UserJwtPayload verifyUser(String token) throws Exception {\r\n        DecodedJWT decoded = verifier.verify(token);\r\n        Long id = decoded.getClaim(\"id\").asLong();\r\n        String email = decoded.getClaim(\"email\").asString();\r\n\r\n\r\n\r\n        if (id != null && email != null) {\r\n            UserJwtPayload userJwtPayload = new UserJwtPayload(id, email);\r\n            return userJwtPayload;\r\n        }\r\n        throw new Exception(\"User not found\");\r\n    }\r\n}\r\n
===================================================================
diff --git a/carsharing/src/main/java/com/example/carsharing/auth/AuthService.java b/carsharing/src/main/java/com/example/carsharing/auth/AuthService.java
--- a/carsharing/src/main/java/com/example/carsharing/auth/AuthService.java	
+++ b/carsharing/src/main/java/com/example/carsharing/auth/AuthService.java	
@@ -40,4 +40,4 @@
         }
         throw new Exception("User not found");
     }
-}
+}
\ No newline at end of file
Index: carsharing/src/main/java/com/example/carsharing/auth/UserJwtPayload.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.carsharing.auth;\r\n\r\npublic class UserJwtPayload {\r\n    public long id;\r\n    public String email;\r\n\r\n    UserJwtPayload(long id, String email){\r\n        this.id = id;\r\n        this.email = email;\r\n    }\r\n}\r\n
===================================================================
diff --git a/carsharing/src/main/java/com/example/carsharing/auth/UserJwtPayload.java b/carsharing/src/main/java/com/example/carsharing/auth/UserJwtPayload.java
--- a/carsharing/src/main/java/com/example/carsharing/auth/UserJwtPayload.java	
+++ b/carsharing/src/main/java/com/example/carsharing/auth/UserJwtPayload.java	
@@ -8,4 +8,4 @@
         this.id = id;
         this.email = email;
     }
-}
+}
\ No newline at end of file
Index: carsharing/src/main/java/com/example/carsharing/dataWriter/UserData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.carsharing.dataWriter;\r\n\r\nimport com.example.carsharing.dto.CreateUserDto;\r\nimport com.example.carsharing.userModule.User;\r\nimport jakarta.annotation.PostConstruct;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\nimport org.json.simple.parser.JSONParser;\r\nimport org.mindrot.jbcrypt.BCrypt;\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Iterator;\r\n\r\npublic class UserData {\r\n    String users_file = \"users.json\";\r\n    String filepath = System.getProperty(\"user.dir\") + System.getProperty(\"file.separator\") + \"data\" + System.getProperty(\"file.separator\") + users_file;\r\n\r\n    private JSONParser parser = new JSONParser();\r\n    private FileReader reader = new FileReader(filepath);\r\n\r\n    private long idCount;\r\n\r\n\r\n    // class constructor\r\n    public UserData() throws Exception{\r\n\r\n        try{\r\n            JSONArray users = get();\r\n\r\n            this.idCount = users.size();\r\n\r\n        }catch (Exception e){\r\n            throw e;\r\n        }\r\n\r\n    }\r\n    @PostConstruct()\r\n    public void init() throws Exception{\r\n\r\n    }\r\n\r\n\r\n    public JSONArray get() throws Exception {\r\n        try (FileReader reader = new FileReader(filepath)) {\r\n            return (JSONArray) this.parser.parse(reader);\r\n        }\r\n    }\r\n\r\n    public JSONObject get(long id) throws Exception {\r\n        try (FileReader reader = new FileReader(filepath)) {\r\n            JSONArray users = (JSONArray) this.parser.parse(reader);\r\n            for (Object obj : users) {\r\n                JSONObject user = (JSONObject) obj;\r\n                if (user.get(\"id\").equals(id)) {\r\n                    return user;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public JSONObject get(String email) throws Exception {\r\n        try (FileReader reader = new FileReader(filepath)) {\r\n            JSONParser parser = new JSONParser();\r\n            JSONArray users = (JSONArray) parser.parse(reader);\r\n            for (Object obj : users) {\r\n                JSONObject user = (JSONObject) obj;\r\n                if (user.get(\"email\").equals(email)) {\r\n                    return user;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    public User create(CreateUserDto newUser) throws Exception {\r\n        JSONArray users = get();\r\n\r\n        String email = newUser.getEmail();\r\n        if (get(email) != null) {\r\n            throw new IOException(\"User with given email already exists\");\r\n        }\r\n        JSONObject user = new JSONObject();\r\n\r\n        String hashedPassword = BCrypt.hashpw(newUser.getPassword(), BCrypt.gensalt());\r\n\r\n\r\n        user.put(\"id\", idCount);\r\n        user.put(\"nickname\", newUser.getNickname());\r\n        user.put(\"password\", hashedPassword);\r\n        user.put(\"email\", newUser.getEmail());\r\n\r\n        users.add(user);\r\n        save(users);\r\n        return new User(idCount, newUser.getNickname(), newUser.getPassword(), newUser.getEmail());\r\n    }\r\n\r\n\r\n    public void update(long id, JSONObject updatedUser) throws Exception {\r\n        JSONArray users = get();\r\n        Iterator<Object> iterator = users.iterator();\r\n        while (iterator.hasNext()) {\r\n            JSONObject user = (JSONObject) iterator.next();\r\n            if (user.get(\"id\").equals(id)) {\r\n                user.putAll(updatedUser); // оновлюємо інформацію користувача\r\n                save(users);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void delete(long id) throws Exception {\r\n        JSONArray users = get();\r\n        Iterator<Object> iterator = users.iterator();\r\n        while (iterator.hasNext()) {\r\n            JSONObject user = (JSONObject) iterator.next();\r\n            if (user.get(\"id\").equals(id)) {\r\n                iterator.remove(); // видаляємо користувача\r\n                save(users);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void save(JSONArray users) throws IOException {\r\n        try (FileWriter writer = new FileWriter(filepath)) {\r\n            writer.write(users.toJSONString());\r\n            writer.flush();\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/carsharing/src/main/java/com/example/carsharing/dataWriter/UserData.java b/carsharing/src/main/java/com/example/carsharing/dataWriter/UserData.java
--- a/carsharing/src/main/java/com/example/carsharing/dataWriter/UserData.java	
+++ b/carsharing/src/main/java/com/example/carsharing/dataWriter/UserData.java	
@@ -2,45 +2,28 @@
 
 import com.example.carsharing.dto.CreateUserDto;
 import com.example.carsharing.userModule.User;
-import jakarta.annotation.PostConstruct;
 import org.json.simple.JSONArray;
 import org.json.simple.JSONObject;
 import org.json.simple.parser.JSONParser;
 import org.mindrot.jbcrypt.BCrypt;
-
 import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.IOException;
-import java.util.Iterator;
 
 public class UserData {
-    String users_file = "users.json";
-    String filepath = System.getProperty("user.dir") + System.getProperty("file.separator") + "data" + System.getProperty("file.separator") + users_file;
+    private String users_file = "users.json";
+    private FileWriter fileWriter;
+    private String filepath = System.getProperty("user.dir") + System.getProperty("file.separator") + "data" + System.getProperty("file.separator") + users_file;
 
     private JSONParser parser = new JSONParser();
-    private FileReader reader = new FileReader(filepath);
-
     private long idCount;
 
-
-    // class constructor
-    public UserData() throws Exception{
-
-        try{
-            JSONArray users = get();
-
-            this.idCount = users.size();
-
-        }catch (Exception e){
-            throw e;
-        }
-
+    // No-argument constructor
+    public UserData() throws Exception {
+        this.fileWriter = fileWriter;
+        JSONArray users = get();
+        this.idCount = users.size(); // This assumes the ID is the size of the array, which may not be accurate if users can be deleted.
     }
-    @PostConstruct()
-    public void init() throws Exception{
-
-    }
-
 
     public JSONArray get() throws Exception {
         try (FileReader reader = new FileReader(filepath)) {
@@ -53,7 +36,7 @@
             JSONArray users = (JSONArray) this.parser.parse(reader);
             for (Object obj : users) {
                 JSONObject user = (JSONObject) obj;
-                if (user.get("id").equals(id)) {
+                if (String.valueOf(id).equals(user.get("id").toString())) {
                     return user;
                 }
             }
@@ -62,33 +45,26 @@
     }
 
     public JSONObject get(String email) throws Exception {
-        try (FileReader reader = new FileReader(filepath)) {
-            JSONParser parser = new JSONParser();
-            JSONArray users = (JSONArray) parser.parse(reader);
-            for (Object obj : users) {
-                JSONObject user = (JSONObject) obj;
-                if (user.get("email").equals(email)) {
-                    return user;
-                }
+        JSONArray users = get();
+        for (Object obj : users) {
+            JSONObject user = (JSONObject) obj;
+            if (user.get("email").equals(email)) {
+                return user;
             }
         }
         return null;
     }
 
-
     public User create(CreateUserDto newUser) throws Exception {
         JSONArray users = get();
-
         String email = newUser.getEmail();
         if (get(email) != null) {
             throw new IOException("User with given email already exists");
         }
         JSONObject user = new JSONObject();
-
         String hashedPassword = BCrypt.hashpw(newUser.getPassword(), BCrypt.gensalt());
 
-
-        user.put("id", idCount);
+        user.put("id", ++idCount); // Increment the ID count for each new user
         user.put("nickname", newUser.getNickname());
         user.put("password", hashedPassword);
         user.put("email", newUser.getEmail());
@@ -98,14 +74,12 @@
         return new User(idCount, newUser.getNickname(), newUser.getPassword(), newUser.getEmail());
     }
 
-
     public void update(long id, JSONObject updatedUser) throws Exception {
         JSONArray users = get();
-        Iterator<Object> iterator = users.iterator();
-        while (iterator.hasNext()) {
-            JSONObject user = (JSONObject) iterator.next();
-            if (user.get("id").equals(id)) {
-                user.putAll(updatedUser); // оновлюємо інформацію користувача
+        for (Object obj : users) {
+            JSONObject user = (JSONObject) obj;
+            if (String.valueOf(id).equals(user.get("id").toString())) {
+                user.putAll(updatedUser);
                 save(users);
                 return;
             }
@@ -114,23 +88,12 @@
 
     public void delete(long id) throws Exception {
         JSONArray users = get();
-        Iterator<Object> iterator = users.iterator();
-        while (iterator.hasNext()) {
-            JSONObject user = (JSONObject) iterator.next();
-            if (user.get("id").equals(id)) {
-                iterator.remove(); // видаляємо користувача
-                save(users);
-                return;
-            }
-        }
+        users.removeIf(obj -> String.valueOf(id).equals(((JSONObject)obj).get("id").toString()));
+        save(users);
     }
 
     private void save(JSONArray users) throws IOException {
-        try (FileWriter writer = new FileWriter(filepath)) {
-            writer.write(users.toJSONString());
-            writer.flush();
-        }
+        fileWriter.write(users.toJSONString());
+        fileWriter.flush();
     }
-
-
 }
Index: carsharing/src/main/java/com/example/carsharing/dataWriter/PostData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.carsharing.dataWriter;\r\n\r\npublic class PostData {\r\n}\r\n
===================================================================
diff --git a/carsharing/src/main/java/com/example/carsharing/dataWriter/PostData.java b/carsharing/src/main/java/com/example/carsharing/dataWriter/PostData.java
--- a/carsharing/src/main/java/com/example/carsharing/dataWriter/PostData.java	
+++ b/carsharing/src/main/java/com/example/carsharing/dataWriter/PostData.java	
@@ -1,4 +1,84 @@
 package com.example.carsharing.dataWriter;
 
+import com.example.carsharing.dto.CreatePostDto;
+import org.json.simple.JSONArray;
+import org.json.simple.JSONObject;
+import org.json.simple.parser.JSONParser;
+
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+
 public class PostData {
+    private String posts_file = "posts.json";
+    private FileWriter fileWriter;
+    private String filepath = System.getProperty("user.dir") + System.getProperty("file.separator") + "data" + System.getProperty("file.separator") + posts_file;
+
+    private JSONParser parser = new JSONParser();
+    private long idCount;
+
+    // No-argument constructor
+    public PostData(FileWriter fileWriter, JSONParser jsonParser) {
+        this.fileWriter = fileWriter;
+        this.parser = jsonParser;
+
+    // This assumes the ID is the size of the array, which may not be accurate if posts can be deleted.
+    }
+
+    public JSONArray get() throws Exception {
+        try (FileReader reader = new FileReader(filepath)) {
+            return (JSONArray) this.parser.parse(reader);
+        }
+    }
+
+    public JSONObject get(long id) throws Exception {
+        JSONArray posts = get();
+        for (Object obj : posts) {
+            JSONObject post = (JSONObject) obj;
+            if (String.valueOf(id).equals(post.get("id").toString())) {
+                return post;
+            }
+        }
+        return null;
+    }
+
+    public JSONObject create(CreatePostDto newPost) throws Exception {
+        JSONArray posts = get();
+        JSONObject post = new JSONObject();
+
+        post.put("id", ++idCount); // Increment the ID count for each new post
+        post.put("title", newPost.getTitle());
+        post.put("body", newPost.getBody());
+        post.put("image", newPost.getImage());
+        post.put("userId", newPost.getUserId());
+
+        posts.add(post);
+        save(posts);
+        return post;
+    }
+
+    public void update(long id, JSONObject updatedPost) throws Exception {
+        JSONArray posts = get();
+        for (Object obj : posts) {
+            JSONObject post = (JSONObject) obj;
+            if (String.valueOf(id).equals(post.get("id").toString())) {
+                post.putAll(updatedPost);
+                save(posts);
+                return;
+            }
+        }
+    }
+
+    public void delete(long id) throws Exception {
+        JSONArray posts = get();
+        posts.removeIf(obj -> String.valueOf(id).equals(((JSONObject)obj).get("id").toString()));
+        save(posts);
+    }
+
+    private void save(JSONArray posts) throws IOException {
+        try (FileWriter file = new FileWriter(filepath)) {
+            file.write(posts.toJSONString());
+            file.flush();
+        }
+    }
 }
Index: carsharing/src/main/java/com/example/carsharing/dto/CreateUserDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.carsharing.dto;\r\n\r\npublic class CreateUserDto {\r\n    String nickname;\r\n    String email;\r\n    String password;\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public String getNickname() {\r\n        return nickname;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n}\r\n
===================================================================
diff --git a/carsharing/src/main/java/com/example/carsharing/dto/CreateUserDto.java b/carsharing/src/main/java/com/example/carsharing/dto/CreateUserDto.java
--- a/carsharing/src/main/java/com/example/carsharing/dto/CreateUserDto.java	
+++ b/carsharing/src/main/java/com/example/carsharing/dto/CreateUserDto.java	
@@ -16,4 +16,10 @@
     public String getEmail() {
         return email;
     }
-}
+
+    public CreateUserDto(String nickname, String email, String password){
+        this.nickname = nickname;
+        this.email = email;
+        this.password = password;
+    }
+}
\ No newline at end of file
